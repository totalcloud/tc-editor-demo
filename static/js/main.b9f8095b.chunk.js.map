{"version":3,"sources":["JSONEditor.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ace","acequire","JsonSchema","$schema","description","additionalProperties","type","argumentOrder","properties","options","metricnames","orderby","aggregation","timespan","onDownloadProgress","timeout","filter","top","metricnamespace","interval","onUploadProgress","abortSignal","dispatchEvent","removeEventListener","onabort","aborted","addEventListener","required","resultType","enum","customHeaders","resourceUri","TcJsonEditor","jsoneditor","container","handleChange","data","props","onChange","error","handleError","errors","length","x","value","handleCodeChange","getMode","json","JSON","parse","getOptions","mode","modes","schema","onChangeText","onChangeJSON","onValidate","onSchemaValidation","getAutoComplete","autoCompletionList","caseSensitive","token","item","prefix","replace","substring","lastIndexOf","startsWith","toLowerCase","includes","this","JSONEditor","set","destroy","prevProps","prevState","snapshot","label","id","name","showCopyControl","invalid","Row","Col","sm","InputGroup","className","md","Label","for","Button","size","color","onClick","ref","elem","style","React","App","useState","Container","console","log","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9f8095b.chunk.js","sourcesContent":["import JSONEditor, { JSONEditorOptions } from \"jsoneditor\";\nimport ace, { Annotation, Editor, IEditSession } from \"brace\";\nimport \"brace/mode/json\";\nimport \"brace/ext/language_tools\";\nimport \"brace/ext/searchbox\";\n\nimport * as React from \"react\";\nimport { Button, Col, InputGroup, Label, Row } from \"reactstrap\";\n\nimport \"jsoneditor/dist/jsoneditor.css\";\n\nif (ace) {\n  const langTools = ace.acequire(\"ace/ext/language_tools\");\n}\n\nconst JsonSchema = {\n  $schema: \"http://json-schema.org/draft-07/schema#\",\n  description: \"Parameters.\",\n  additionalProperties: false,\n  type: \"object\",\n  argumentOrder: [\"resourceUri\", \"options\", \"callback\"],\n  properties: {\n    options: {\n      description: \"Optional Parameters.\",\n      additionalProperties: false,\n      type: \"object\",\n      properties: {\n        metricnames: {\n          type: \"string\",\n          description: \"The names of the metrics (comma separated) to retrieve.\"\n        },\n        orderby: {\n          type: \"string\",\n          description:\n            \"The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum asc.\"\n        },\n        aggregation: {\n          type: \"string\",\n          description:\n            \"The list of aggregation types (comma separated) to retrieve.\"\n        },\n        timespan: {\n          type: \"string\",\n          description:\n            \"The timespan of the query. It is a string with the following format 'startDateTime_ISO/endDateTime_ISO'.\"\n        },\n        onDownloadProgress: {\n          type: \"object\",\n          description: \"Callback which fires upon download progress.\",\n          additionalProperties: false\n        },\n        timeout: {\n          type: \"number\",\n          description:\n            \"The number of milliseconds a request can take before automatically being terminated.\"\n        },\n        filter: {\n          type: \"string\",\n          description:\n            \"The **$filter** is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**$filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**$filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**$filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.\"\n        },\n        top: {\n          type: \"number\",\n          description:\n            \"The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.\"\n        },\n        metricnamespace: {\n          type: \"string\",\n          description: \"Metric namespace to query metric definitions for.\"\n        },\n        interval: {\n          type: \"string\",\n          description: \"The interval (i.e. timegrain) of the query.\"\n        },\n        onUploadProgress: {\n          type: \"object\",\n          description: \"Callback which fires upon upload progress.\",\n          additionalProperties: false\n        },\n        abortSignal: {\n          description: \"The signal which can be used to abort requests.\",\n          additionalProperties: false,\n          type: \"object\",\n          properties: {\n            dispatchEvent: {\n              type: \"object\",\n              additionalProperties: false\n            },\n            removeEventListener: {\n              type: \"object\",\n              additionalProperties: false\n            },\n            onabort: {\n              type: \"object\",\n              additionalProperties: false\n            },\n            aborted: {\n              type: \"boolean\"\n            },\n            addEventListener: {\n              type: \"object\",\n              additionalProperties: false\n            }\n          },\n          required: [\n            \"aborted\",\n            \"addEventListener\",\n            \"dispatchEvent\",\n            \"onabort\",\n            \"removeEventListener\"\n          ]\n        },\n        resultType: {\n          type: \"string\",\n          description:\n            \"Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details. Possible values include: 'Data', 'Metadata'\",\n          enum: [\"Data\", \"Metadata\"]\n        },\n        customHeaders: {\n          type: \"object\",\n          additionalProperties: {\n            type: \"string\"\n          }\n        }\n      }\n    },\n    resourceUri: {\n      type: \"string\"\n    }\n  },\n  required: [\"resourceUri\", \"options\"]\n};\n\nexport type SchemaValidationError = {\n  path: (string | number)[];\n  message: string;\n};\n\ninterface IProps {\n  id?: string;\n  label?: string;\n  error?: any;\n  name?: string;\n  showCopyControl?: boolean;\n  autoCompletionList?: string[];\n  value: any;\n  onSchemaValidation?: (\n    json: any\n  ) => SchemaValidationError[] | Promise<SchemaValidationError[]>;\n  style?: any;\n  onChange: (props: { data: any; error: boolean }) => void;\n}\n\nexport class TcJsonEditor extends React.Component<IProps> {\n  jsoneditor: JSONEditor | null = null;\n  container: HTMLDivElement | null = null;\n\n  handleChange = (data: any) => {\n    this.props &&\n      this.props.onChange &&\n      this.props.onChange({ data, error: false });\n  };\n\n  handleError = (errors: any[]) => {\n    if (errors && errors.length) {\n      errors = errors.filter(x => x.type !== \"customValidation\");\n    }\n    if (!errors || errors.length === 0)\n      this.props.onChange({ data: this.props.value.data, error: false });\n    else {\n      this.props.onChange({ data: this.props.value.data, error: true });\n    }\n  };\n\n  handleCodeChange = (data: string) => {\n    if (this.jsoneditor && this.jsoneditor.getMode() === \"code\") {\n      try {\n        let json = JSON.parse(data);\n        this.handleChange(json);\n      } catch (error) {}\n    }\n  };\n\n  getOptions = (): JSONEditorOptions => {\n    return {\n      mode: \"tree\",\n      modes: [\"code\", \"tree\"],\n      // @ts-ignore\n      ace: ace,\n      schema: JsonSchema,\n      onChangeText: this.handleCodeChange,\n      onChangeJSON: this.handleChange,\n      //   autocomplete: this.getAutoComplete(),\n      //   onValidationError: this.handleError,\n      onValidate: this.props.onSchemaValidation\n    };\n  };\n  getAutoComplete = () => {\n    let { autoCompletionList } = this.props;\n    return {\n      caseSensitive: false,\n      filter: (token: string, item: string) => {\n        token = token.replace(/\\.\\d*\\./g, \"\").replace('\"', \"\");\n        let prefix = token.substring(0, token.lastIndexOf(\".\"));\n        let result =\n          item.startsWith(prefix) &&\n          item\n            .toLowerCase()\n            .includes(\n              token.toLowerCase().substring(token.lastIndexOf(\".\") + 1)\n            );\n        return result;\n      },\n      getOptions: function() {\n        return autoCompletionList || [];\n      }\n    };\n  };\n\n  componentDidMount() {\n    this.jsoneditor = new JSONEditor(\n      this.container as HTMLElement,\n      this.getOptions()\n    );\n    this.jsoneditor.set(this.props.value.data);\n  }\n\n  componentWillUnmount() {\n    if (this.jsoneditor) {\n      this.jsoneditor.destroy();\n    }\n  }\n\n  componentDidUpdate(\n    prevProps: Readonly<IProps>,\n    prevState: Readonly<{}>,\n    snapshot?: any\n  ): void {\n    //   let { ace} = JSONEditor;\n    // if (ace && !ace.completers) {\n    //   ace.commands.on(\"afterExec\", (e: any) => {\n    //     // console.log(\"afterExec\");\n    //     if (e.command.name == \"insertstring\" && /^[\\w.]$/.test(e.args)) {\n    //       ace.execCommand(\"startAutocomplete\");\n    //     }\n    //   });\n    //   let staticWordCompleter = getWordCompleter(this.props.autoCompletionList);\n    //   aceEditor.completers = [staticWordCompleter];\n  }\n\n  render() {\n    const {\n      label,\n      id,\n      name,\n      value,\n      error,\n      showCopyControl = true\n    } = this.props;\n    const invalid = !!(error && error.length);\n    return (\n      <Row>\n        <Col sm={12}>\n          <InputGroup className={\"row\"}>\n            <Col md={8}>{label && <Label for={id}>{label}</Label>}</Col>\n            {showCopyControl && (\n              <Col md={4} className={\"text-right\"}>\n                <Button\n                  className='test-copy-button'\n                  size={\"sm\"}\n                  color={\"link\"}\n                  onClick={\n                    () => null\n                    // copyToClipboard(JSON.stringify(value.data, null, 3))\n                  }>\n                  Copy to clipboard\n                </Button>\n              </Col>\n            )}\n\n            <Col md={12}>\n              <div\n                className='jsoneditor-react-container'\n                ref={elem => (this.container = elem)}\n              />\n            </Col>\n\n            {invalid && (\n              <Col>\n                <small style={{ color: \"#fb6340\" }}>{error}</small>\n              </Col>\n            )}\n          </InputGroup>\n        </Col>\n      </Row>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Col, Container, Row, Button } from \"reactstrap\";\nimport { TcJsonEditor } from \"./JSONEditor\";\n\nfunction App() {\n  const [value, setvalue] = useState({\n    data: {\n      options: {\n        filter: \"<optional>\",\n        metricnames: \"<optional>\",\n        top: \"<optional>\",\n        metricnamespace: \"<optional>\",\n        orderby: \"<optional>\",\n        interval: \"<optional>\",\n        aggregation: \"<optional>\",\n        timespan: \"<optional>\",\n        abortSignal: {\n          aborted: \"required\"\n        },\n        resultType: \"<optional>\",\n        timeout: \"<optional>\"\n      },\n      resourceUri: \"required\"\n    },\n    error: false\n  });\n\n  const onChange = ({ data, error }: { data: any; error: boolean }) => {\n    console.log(data, error);\n  };\n\n  return (\n    <div className='App'>\n      <Container>\n        <Row>\n          <Col md={6} className='mx-auto mt-5'>\n            <h3>TC JSONEDITOR help popup for params.</h3>\n            <p>\n              Hover over any property-name to view the description as per\n              json-schema\n            </p>\n            <TcJsonEditor\n              showCopyControl={false}\n              onChange={onChange}\n              autoCompletionList={[]}\n              name='test-editor'\n              id='test-items'\n              value={value}\n            />\n          </Col>\n        </Row>\n\n        <div className='fixed-bottom bottom-0 left-0 text-center w-100 py-4'>\n          <a href='https://totalcloud.io' target='_blank' rel='noreferrer'>\n            Totalcloud.io\n          </a>\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}